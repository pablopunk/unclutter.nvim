================================================================================
unclutter                                                          *unclutter*



unclutter.setup_foo({opts})                            *unclutter.setup_foo()*
    Setup function (optional)


    Parameters: ~
        {opts} (unclutter.config)



================================================================================
unclutter.autocmds                                        *unclutter.autocmds*



autocmds.remove_augroup()                          *autocmds.remove_augroup()*
    Remove the created augroup.



autocmds.on_buf_leave({callback})                    *autocmds.on_buf_leave()*
    Create an autocmd for the BufLeave event.


    Parameters: ~
        {callback} (function)  The callback function to be executed.


autocmds.on_buf_delete({callback})                  *autocmds.on_buf_delete()*
    Create an autocmd for the BufDelete event.


    Parameters: ~
        {callback} (function)  The callback function to be executed.


autocmds.on_buf_enter({callback})                    *autocmds.on_buf_enter()*
    Create an autocmd for the BufEnter event.


    Parameters: ~
        {callback} (function)  The callback function to be executed.


autocmds.on_buf_write_post({callback})          *autocmds.on_buf_write_post()*
    Create an autocmd for the BufWritePost event.


    Parameters: ~
        {callback} (function)  The callback function to be executed.


autocmds.on_vim_enter({callback})                    *autocmds.on_vim_enter()*
    Create an autocmd for the VimEnter event.


    Parameters: ~
        {callback} (function)  The callback function to be executed.


autocmds.on_insert_enter({callback})              *autocmds.on_insert_enter()*
    Create an autocmd for the InsertEnter event.


    Parameters: ~
        {callback} (function)  The callback function to be executed.


autocmds.on_buf_modified_set({callback})      *autocmds.on_buf_modified_set()*
    Create an autocmd for the BufModifiedSet event.


    Parameters: ~
        {callback} (function)  The callback function to be executed.


autocmds.on_win_enter({callback})                    *autocmds.on_win_enter()*
    Create an autocmd for the WinEnter event.


    Parameters: ~
        {callback} (function)  The callback function to be executed.


autocmds.on_win_new({callback})                        *autocmds.on_win_new()*
    Create an autocmd for the WinNew event.


    Parameters: ~
        {callback} (function)  The callback function to be executed.



================================================================================
unclutter.buffer                                            *unclutter.buffer*



buffer.current()                                            *buffer.current()*
    Get the current buffer


    Return: ~
        number


buffer.number({file_path})                                   *buffer.number()*
    Get the buffer number of the file


    Parameters: ~
        {file_path} (string)

    Return: ~
        number|nil


buffer.name({buf})                                             *buffer.name()*
    Get the name of buffer


    Parameters: ~
        {buf} (number)

    Return: ~
        string


buffer.type({buf})                                             *buffer.type()*
    Get the buftype of buffer


    Parameters: ~
        {buf} (number)

    Return: ~
        string


buffer.delete({buf})                                         *buffer.delete()*
    Delete buffer


    Parameters: ~
        {buf} (number)

    Return: ~
        boolean


buffer.unload({buf})                                         *buffer.unload()*
    Unload buffer


    Parameters: ~
        {buf} (number)

    Return: ~
        boolean


buffer.is_file({buf})                                       *buffer.is_file()*
    Check if buffer is a file


    Parameters: ~
        {buf} (number)

    Return: ~
        boolean


buffer.windows({buf})                                       *buffer.windows()*
    Return number of windows where buffer is open


    Parameters: ~
        {buf} (number)

    Return: ~
        number


buffer.is_visible({buf})                                 *buffer.is_visible()*
    Check if buffer is visible in current tab


    Parameters: ~
        {buf} (number)

    Return: ~
        boolean


buffer.is_valid({buf})                                     *buffer.is_valid()*
    Check if buffer is valid


    Parameters: ~
        {buf} (number)

    Return: ~
        boolean


buffer.is_loaded({buf})                                   *buffer.is_loaded()*
    Check if buffer is loaded


    Parameters: ~
        {buf} (number)

    Return: ~
        boolean


buffer.listed({buf})                                         *buffer.listed()*
    Check if buffer is listed


    Parameters: ~
        {buf} (number)

    Return: ~
        boolean


buffer.all()                                                    *buffer.all()*
    Return all listed buffers + the current buffer (even if it's not listed)


    Return: ~
        table



================================================================================
unclutter.config                                            *unclutter.config*


    Fields: ~
        {clean_after} (number)
        {tabline}     (boolean)


config.set({opts})                                              *config.set()*
    Set config values


    Parameters: ~
        {opts} (unclutter.config)



================================================================================
unclutter.plugin                                            *unclutter.plugin*



plugin.buf_just_left()                                *plugin.buf_just_left()*



plugin.enable({opts})                                        *plugin.enable()*
    Initialize the plugin


    Parameters: ~
        {opts} (unclutter.config)


plugin.disable()                                            *plugin.disable()*
    Disable the plugin



plugin.setup_autocmds()                              *plugin.setup_autocmds()*
    Setup the autocmds



plugin.buffer_should_be_hidden_on_leave({buf}) *plugin.buffer_should_be_hidden_on_leave()*
    Check if buffer should be hidden


    Parameters: ~
        {buf} (number)

    Return: ~
        boolean



================================================================================
unclutter.tabline                                          *unclutter.tabline*



tabline.buffers_to_keep()                          *tabline.buffers_to_keep()*



tabline.enable()                                            *tabline.enable()*
    Set vim options and format tabline



tabline.disable()                                          *tabline.disable()*
    Disable tabline



tabline.make_tabpage_section()                *tabline.make_tabpage_section()*
    Update tabpage section string Copied from
    https://github.com/echasnovski/mini.tabline/blob/main/lua/mini/tabline.lua



tabline.remove_buffer({bufnr})                       *tabline.remove_buffer()*
    Remove a buffer from the list


    Parameters: ~
        {bufnr} (number)


tabline.keep_buffer({bufnr})                           *tabline.keep_buffer()*
    Add a buffer to the list


    Parameters: ~
        {bufnr} (number)


tabline.toggle_buffer({bufnr})                       *tabline.toggle_buffer()*
    Toggle a buffer in the buffer list


    Parameters: ~
        {bufnr} (number)


tabline.create_clickable_tab_fn()          *tabline.create_clickable_tab_fn()*
    Create the function for switching buffers with the mouse Copied from
    https://github.com/echasnovski/mini.tabline/blob/main/lua/mini/tabline.lua#L185



tabline.is_buffer_hidden({bufnr})                 *tabline.is_buffer_hidden()*
    Is buffer hidden?


    Parameters: ~
        {bufnr} (number)

    Return: ~
        boolean


tabline.is_buffer_kept({bufnr})                     *tabline.is_buffer_kept()*
    Is buffer shown?


    Parameters: ~
        {bufnr} (number)

    Return: ~
        boolean


tabline.get_tab_highlight({buf})                 *tabline.get_tab_highlight()*
    Get the highlight group for a buffer


    Parameters: ~
        {buf} (number)


tabline.get_tab_func({buf})                           *tabline.get_tab_func()*
    Get the tab's clickable action


    Parameters: ~
        {buf} (number)


tabline.get_tab_label({buf})                         *tabline.get_tab_label()*
    Get the tab's label


    Parameters: ~
        {buf} (number)

    Return: ~
        string|nil


tabline.list()                                                *tabline.list()*
    Get all buffers to be displayed in the tabline


    Return: ~
        table<number, number>


tabline.get_buffer_tabs()                          *tabline.get_buffer_tabs()*
    Get all tabs


    Return: ~
        table<number, table>


tabline.get_tabline_string()                    *tabline.get_tabline_string()*
    Get the tabline string



tabline.next()                                                *tabline.next()*
    Navigate to next buffer



tabline.prev()                                                *tabline.prev()*
    Navigate to previous buffer




================================================================================
unclutter.telescope                                      *unclutter.telescope*




 vim:tw=78:ts=8:ft=help:norl:
